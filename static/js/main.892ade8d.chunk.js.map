{"version":3,"sources":["components/Header.js","components/Footer.js","components/Form.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Footer","Form","props","handleWord","event","url","target","value","setState","handleSubmit","a","preventDefault","state","fetch","raw","console","log","json","data","count","people","results","reduce","list","person","name","handler","headers","handleSelect","method","onSubmit","this","for","onChange","id","type","Results","Object","keys","map","key","idx","href","App","handleForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.892ade8d.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.scss'\n\nclass Header extends React.Component {\n    render(){\n        return (\n            <header className=\"App-header\">\n                <h1>This is my header for RESTy</h1>\n            </header>\n        )\n    }\n}\n\nexport default Header;\n","import React from 'react'\nimport './Footer.scss'\n\nclass Footer extends React.Component {\n    render() {\n        return (\n            <footer className=\"App-footer\">\n                <h1>This is my footer for RESTy</h1>\n            </footer>\n        )\n    }\n}\n\nexport default Footer;\n","import React from 'react'\nimport './Form.scss'\n\nclass Form extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            url: null,\n            method : null\n        }\n    }\n\n    handleWord = event => {\n        let url = event.target.value;\n        this.setState({ url })\n    }\n\n    handleSubmit = async event => {\n        \n        event.preventDefault()\n        \n        let url = this.state.url\n        this.setState({ url })\n\n        let raw = await fetch(url)\n        console.log(raw)\n        let data = await raw.json()\n\n        let count = data.count\n        let people = data.results.reduce((list, person) => {\n            list[person.name] = person.url;\n            return list;\n        }, {})\n\n        this.props.handler(count, raw.headers, people);\n    }\n\n    handleSelect = event => {\n        let method = event.target.value\n        this.setState({ method })\n    }\n\n    render() {\n        return (\n            <div className=\"form\">\n                <form onSubmit={this.handleSubmit}>\n                    <label for=\"url\">URL: </label>\n                    <input onChange={this.handleWord} id=\"url\" />\n                    <div className=\"methods\">\n                        <input onChange={this.handleSelect} type=\"radio\" id=\"get\" name=\"method\" value=\"get\" />\n                        <label for=\"get\">GET</label>\n                        <input onChange={this.handleSelect} type=\"radio\" id=\"delete\" name=\"method\" value=\"delete\" />\n                        <label for=\"delete\">DELETE</label>\n                        <input onChange={this.handleSelect} type=\"radio\" id=\"post\" name=\"method\" value=\"post\" />\n                        <label for=\"post\">POST</label>\n                        <input onChange={this.handleSelect} type=\"radio\" id=\"put\" name=\"method\" value=\"put\" />\n                        <label for=\"put\">PUT</label>\n                    </div>\n                    <button>Submit</button>\n                </form>\n\n                <div className=\"displayParentBox\">\n                    <div className=\"displayState\">\n                        <h3>URL:</h3>\n                        <h4>{this.state.url}</h4>\n                    </div>\n                    <div className=\"displayState\">\n                        <h3>METHOD:</h3>\n                        <h4>{this.state.method}</h4>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Form;\n","import React from 'react'\nimport JSONPretty from 'react-json-pretty'\n\nclass Results extends React.Component {\n    render() {\n        return (\n            <>\n                <h3>Count: {this.props.count}</h3>\n                <ul>\n                    {Object.keys(this.props.results).map((key, idx) => {\n                        return (\n                            <li key={idx}>\n                                <a href={this.props.results[key]}>{key}</a>\n                            </li>\n                        )\n                    })}\n                </ul>\n                <JSONPretty data={this.props.headers}></JSONPretty>\n                <JSONPretty data={this.props.results}></JSONPretty>\n            </>\n        )\n    }\n}\n\nexport default Results","import React from 'react';\nimport './reset.css';\nimport './App.scss';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Form from './components/Form'\nimport Results from './components/Results'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      results: [],\n      count: 0,\n      headers: 0,\n    }\n  }\n\n  handleForm = (count, headers ,results) => {\n    this.setState({results, count, headers})\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Header />\n        <Form handler={this.handleForm}/>\n        <Results count={this.state.count} headers={this.state.headers} results={this.state.results}/>\n        <Footer />\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}